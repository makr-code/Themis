openapi: 3.0.3
info:
  title: VCCDB REST API
  description: |
    Multi-model database with vector search, graph traversal, and secondary indexes.
    Supports document storage, graph relationships, vector embeddings, and complex queries.
  version: 0.1.0
  contact:
    name: VCCDB Team
  license:
    name: MIT

servers:
  - url: http://localhost:8080
    description: Local development server

tags:
  - name: Health
    description: Service health and monitoring
  - name: Entities
    description: CRUD operations for entities (documents/nodes)
  - name: Query
    description: Complex query execution with filtering and joins
  - name: Index
    description: Secondary index management (Regular, Composite, Range, Sparse, Geo, TTL, Fulltext)
  - name: Graph
    description: Graph traversal and relationship queries
  - name: Vector
    description: Vector similarity search (KNN, embeddings)
  - name: Transaction
    description: Multi-operation atomic transactions
  - name: Cache
    description: Semantic Cache (RAG)
  - name: LLM
    description: LLM Interaction Store (CoT)
  - name: CDC
    description: Change Data Capture feed

paths:
  /:
    get:
      tags: [Health]
      summary: Health check
      operationId: healthCheck
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  version:
                    type: string
                    example: 0.1.0

  /health:
    get:
      tags: [Health]
      summary: Health check (alias)
      operationId: health
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok

  /stats:
    get:
      tags: [Health]
      summary: Database statistics
      operationId: getStats
      responses:
        '200':
          description: Database statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  uptime_seconds:
                    type: integer
                    example: 3600
                  total_requests:
                    type: integer
                    example: 1234
                  db_size_bytes:
                    type: integer
                    example: 1048576

  /metrics:
    get:
      tags: [Health]
      summary: Prometheus metrics
      operationId: getMetrics
      responses:
        '200':
          description: Prometheus metrics in text format
          content:
            text/plain:
              schema:
                type: string
                example: |
                  # HELP vccdb_requests_total Total HTTP requests
                  # TYPE vccdb_requests_total counter
                  vccdb_requests_total 1234
                  # HELP vccdb_index_rebuilds_total Total index rebuilds
                  # TYPE vccdb_index_rebuilds_total counter
                  vccdb_index_rebuilds_total 5

  /entities/{key}:
    get:
      tags: [Entities]
      summary: Get entity by primary key
      operationId: getEntity
      parameters:
        - name: key
          in: path
          required: true
          schema:
            type: string
          description: Primary key of the entity
          example: person_123
      responses:
        '200':
          description: Entity found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
        '404':
          description: Entity not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags: [Entities]
      summary: Create or update entity
      operationId: putEntity
      parameters:
        - name: key
          in: path
          required: true
          schema:
            type: string
          example: person_123
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
              example:
                name: John Doe
                age: 30
                email: john@example.com
      responses:
        '200':
          description: Entity created/updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  key:
                    type: string
                    example: person_123
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags: [Entities]
      summary: Delete entity
      operationId: deleteEntity
      parameters:
        - name: key
          in: path
          required: true
          schema:
            type: string
          example: person_123
      responses:
        '200':
          description: Entity deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
        '404':
          description: Entity not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /entities:
    post:
      tags: [Entities]
      summary: Create entity (auto-generated key or from body)
      operationId: createEntity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Optional primary key (auto-generated if omitted)
                  example: person_123
              additionalProperties: true
              example:
                id: person_123
                name: Jane Doe
                age: 28
      responses:
        '201':
          description: Entity created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  key:
                    type: string
                    example: person_123

  /query:
    post:
      tags: [Query]
      summary: Execute complex query
      operationId: executeQuery
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      responses:
        '200':
          description: Query results
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Entity'
                  count:
                    type: integer
                    example: 42
        '400':
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /index/create:
    post:
      tags: [Index]
      summary: Create secondary index
      operationId: createIndex
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIndexRequest'
      responses:
        '200':
          description: Index created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  type:
                    type: string
                    example: regular
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /index/drop:
    post:
      tags: [Index]
      summary: Drop secondary index
      operationId: dropIndex
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [table, column]
              properties:
                table:
                  type: string
                  example: Person
                column:
                  type: string
                  example: email
      responses:
        '200':
          description: Index dropped
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok

  /index/stats:
    get:
      tags: [Index]
      summary: Get index statistics
      operationId: getIndexStats
      parameters:
        - name: table
          in: query
          required: false
          schema:
            type: string
          description: Filter by table name
          example: Person
      responses:
        '200':
          description: Index statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  indexes:
                    type: array
                    items:
                      $ref: '#/components/schemas/IndexStats'

  /index/rebuild:
    post:
      tags: [Index]
      summary: Rebuild index from scratch
      operationId: rebuildIndex
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [table, column]
              properties:
                table:
                  type: string
                  example: Person
                column:
                  type: string
                  example: email
      responses:
        '200':
          description: Index rebuilt
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  entities_processed:
                    type: integer
                    example: 10000

  /index/reindex:
    post:
      tags: [Index]
      summary: Rebuild all indexes for a table
      operationId: reindexTable
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [table]
              properties:
                table:
                  type: string
                  example: Person
      responses:
        '200':
          description: All indexes rebuilt
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok

  /graph/traverse:
    post:
      tags: [Graph]
      summary: Traverse graph relationships
      operationId: traverseGraph
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GraphTraverseRequest'
      responses:
        '200':
          description: Traversal results
          content:
            application/json:
              schema:
                type: object
                properties:
                  nodes:
                    type: array
                    items:
                      type: string
                    example: [person_1, person_2, person_3]

  /vector/search:
    post:
      tags: [Vector]
      summary: Vector similarity search (KNN)
      operationId: vectorSearch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VectorSearchRequest'
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/VectorSearchResult'

  /transaction:
    post:
      tags: [Transaction]
      summary: Execute atomic transaction
      operationId: executeTransaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionRequest'
      responses:
        '200':
          description: Transaction committed
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: committed
        '400':
          description: Transaction aborted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # ========== NEW: Session-based Transaction Endpoints ==========
  
  /transaction/begin:
    post:
      tags: [Transaction]
      summary: Begin a new transaction
      description: |
        Starts a new session-based transaction with configurable isolation level.
        Returns a transaction_id that must be used for subsequent operations.
      operationId: transactionBegin
      requestBody:
        description: Transaction configuration (optional)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionBeginRequest'
      responses:
        '200':
          description: Transaction started successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionBeginResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /transaction/commit:
    post:
      tags: [Transaction]
      summary: Commit a transaction
      description: |
        Commits all operations within the specified transaction atomically.
        All index updates (Secondary, Graph, Vector) are applied atomically via WriteBatch.
      operationId: transactionCommit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionCommitRequest'
      responses:
        '200':
          description: Transaction committed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionCommitResponse'
        '400':
          description: Transaction not found or already completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionCommitResponse'
              example:
                transaction_id: 42
                status: error
                error: Transaction not found or already completed
        '500':
          description: Commit failed (automatically rolled back)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionCommitResponse'
              example:
                transaction_id: 42
                status: error
                error: Commit failed, transaction rolled back

  /transaction/rollback:
    post:
      tags: [Transaction]
      summary: Rollback a transaction
      description: |
        Rolls back all operations within the specified transaction.
        All changes are discarded, indexes remain unchanged.
      operationId: transactionRollback
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionRollbackRequest'
      responses:
        '200':
          description: Transaction rolled back successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionRollbackResponse'
        '400':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionRollbackResponse'
              example:
                transaction_id: 42
                status: error
                message: Transaction not found

  /transaction/stats:
    get:
      tags: [Transaction]
      summary: Get transaction statistics
      description: |
        Returns comprehensive statistics about all transactions:
        - Total begun, committed, aborted
        - Active transaction count
        - Average and maximum durations
        - Success rate (committed / begun)
      operationId: transactionStats
      responses:
        '200':
          description: Transaction statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionStatsResponse'

  /cache/query:
    post:
      tags: [Cache]
      summary: Semantic Cache Lookup
      operationId: cacheQuery
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CacheQueryRequest'
      responses:
        '200':
          description: Cache query result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CacheQueryResponse'

  /cache/put:
    post:
      tags: [Cache]
      summary: Semantic Cache Put
      operationId: cachePut
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CachePutRequest'
      responses:
        '200':
          description: Put result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CachePutResponse'

  /cache/stats:
    get:
      tags: [Cache]
      summary: Semantic Cache Stats
      operationId: cacheStats
      responses:
        '200':
          description: Stats
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CacheStatsResponse'

  /llm/interaction:
    post:
      tags: [LLM]
      summary: Create LLM interaction
      operationId: createLlmInteraction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LlmInteractionRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LlmInteractionResponse'
    get:
      tags: [LLM]
      summary: List LLM interactions
      operationId: listLlmInteractions
      parameters:
        - in: query
          name: limit
          schema: { type: integer, default: 50 }
        - in: query
          name: after
          schema: { type: string }
      responses:
        '200':
          description: List
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: '#/components/schemas/LlmInteraction' }
                  next:
                    type: string
                    nullable: true
                required: [items]

  /llm/interaction/{id}:
    get:
      tags: [LLM]
      summary: Get LLM interaction
      operationId: getLlmInteraction
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/LlmInteraction' }
        '404':
          description: Not found

  /changefeed:
    get:
      tags: [CDC]
      summary: Changefeed
      operationId: getChangefeed
      parameters:
        - in: query
          name: from_seq
          required: true
          schema: { type: integer, format: int64 }
        - in: query
          name: limit
          schema: { type: integer, default: 100 }
        - in: query
          name: long_poll_ms
          schema: { type: integer, default: 0 }
      responses:
        '200':
          description: Changes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangefeedResponse'

components:
  schemas:
    Entity:
      type: object
      properties:
        id:
          type: string
          example: person_123
      additionalProperties: true
      example:
        id: person_123
        name: John Doe
        age: 30
        email: john@example.com

    Error:
      type: object
      required: [error]
      properties:
        error:
          type: string
          example: Entity not found

    QueryRequest:
      type: object
      required: [table]
      properties:
        table:
          type: string
          example: Person
        filter:
          type: object
          additionalProperties: true
          example:
            age: { $gte: 25, $lte: 35 }
            city: Berlin
        limit:
          type: integer
          example: 100
        offset:
          type: integer
          example: 0
        sort:
          type: object
          additionalProperties:
            type: string
            enum: [asc, desc]
          example:
            age: desc

    CreateIndexRequest:
      type: object
      required: [table, column, type]
      properties:
        table:
          type: string
          example: Person
        column:
          type: string
          description: Column name (or "col1+col2" for composite)
          example: email
        type:
          type: string
          enum: [regular, composite, range, sparse, geo, ttl, fulltext]
          example: regular
        unique:
          type: boolean
          example: true
        ttl_seconds:
          type: integer
          description: TTL in seconds (for ttl type only)
          example: 3600

    IndexStats:
      type: object
      properties:
        type:
          type: string
          example: regular
        table:
          type: string
          example: Person
        column:
          type: string
          example: email
        entry_count:
          type: integer
          example: 10000
        estimated_size_bytes:
          type: integer
          example: 524288
        unique:
          type: boolean
          example: true

    GraphTraverseRequest:
      type: object
      required: [start_node, edge_type]
      properties:
        start_node:
          type: string
          example: person_1
        edge_type:
          type: string
          example: FRIEND_OF
        direction:
          type: string
          enum: [outbound, inbound, both]
          example: outbound
        max_depth:
          type: integer
          example: 3

    VectorSearchRequest:
      type: object
      required: [query_vector, k]
      properties:
        query_vector:
          type: array
          items:
            type: number
          example: [0.1, 0.2, 0.3, 0.4]
        k:
          type: integer
          description: Number of nearest neighbors
          example: 10
        filter:
          type: object
          description: Optional pre-filter
          additionalProperties: true

    VectorSearchResult:
      type: object
      properties:
        id:
          type: string
          example: doc_456
        distance:
          type: number
          format: float
          example: 0.234

    # ========== Transaction Schemas ==========
    
    TransactionBeginRequest:
      type: object
      properties:
        isolation:
          type: string
          enum: [read_committed, snapshot]
          default: read_committed
          description: Isolation level for the transaction
      example:
        isolation: snapshot
    
    TransactionBeginResponse:
      type: object
      required: [transaction_id, isolation, status]
      properties:
        transaction_id:
          type: integer
          format: int64
          description: Unique transaction identifier
          example: 42
        isolation:
          type: string
          enum: [read_committed, snapshot]
          example: read_committed
        status:
          type: string
          example: begun
    
    TransactionCommitRequest:
      type: object
      required: [transaction_id]
      properties:
        transaction_id:
          type: integer
          format: int64
          description: Transaction ID to commit
          example: 42
    
    TransactionCommitResponse:
      type: object
      required: [transaction_id, status]
      properties:
        transaction_id:
          type: integer
          format: int64
          example: 42
        status:
          type: string
          enum: [committed, error]
          example: committed
        message:
          type: string
          example: Transaction committed successfully
        error:
          type: string
          description: Error message if status is 'error'
          example: Transaction not found
    
    TransactionRollbackRequest:
      type: object
      required: [transaction_id]
      properties:
        transaction_id:
          type: integer
          format: int64
          description: Transaction ID to rollback
          example: 42
    
    TransactionRollbackResponse:
      type: object
      required: [transaction_id, status]
      properties:
        transaction_id:
          type: integer
          format: int64
          example: 42
        status:
          type: string
          enum: [rolled_back, error]
          example: rolled_back
        message:
          type: string
          example: Transaction rolled back successfully
    
    TransactionStatsResponse:
      type: object
      required:
        - total_begun
        - total_committed
        - total_aborted
        - active_count
        - avg_duration_ms
        - max_duration_ms
        - success_rate
      properties:
        total_begun:
          type: integer
          format: int64
          description: Total number of transactions started
          example: 1523
        total_committed:
          type: integer
          format: int64
          description: Total number of successfully committed transactions
          example: 1401
        total_aborted:
          type: integer
          format: int64
          description: Total number of rolled back transactions
          example: 122
        active_count:
          type: integer
          format: int64
          description: Current number of active transactions
          example: 3
        avg_duration_ms:
          type: integer
          format: int64
          description: Average transaction duration in milliseconds
          example: 45
        max_duration_ms:
          type: integer
          format: int64
          description: Maximum transaction duration in milliseconds
          example: 523
        success_rate:
          type: number
          format: double
          description: Ratio of committed to total begun transactions (0.0 - 1.0)
          example: 0.92

    CacheQueryRequest:
      type: object
      properties:
        key: { type: string }
        prompt: { type: string }
        embedding:
          type: array
          items: { type: number }
        top_k: { type: integer, default: 1 }
        allow_insert_on_miss: { type: boolean, default: false }
        ttl_sec: { type: integer, minimum: 0 }
        metadata: { type: object }
    CacheHit:
      type: object
      properties:
        key: { type: string }
        value: { type: object }
        score: { type: number }
        metadata: { type: object }
    CacheQueryResponse:
      type: object
      properties:
        hit: { type: boolean }
        hits:
          type: array
          items: { $ref: '#/components/schemas/CacheHit' }
    CachePutRequest:
      type: object
      properties:
        key: { type: string }
        value: { type: object }
        embedding:
          type: array
          items: { type: number }
        ttl_sec: { type: integer }
        metadata: { type: object }
      required: [key, value]
    CachePutResponse:
      type: object
      properties:
        success: { type: boolean }
        key: { type: string }
        expires_at: { type: string, format: date-time, nullable: true }
    CacheStatsResponse:
      type: object
      properties:
        entries: { type: integer, format: int64 }
        hit_ratio_1m: { type: number }
        hit_ratio_1h: { type: number }
        evictions_total: { type: integer, format: int64 }
        bytes: { type: integer, format: int64 }

    LlmMessage:
      type: object
      properties:
        role: { type: string, enum: [user, system, assistant, tool] }
        content: { type: string }
    ReasoningStep:
      type: object
      properties:
        type: { type: string }
        content:
          type: array
          items: { type: string }
    LlmInteractionRequest:
      type: object
      properties:
        model: { type: string }
        messages:
          type: array
          items: { $ref: '#/components/schemas/LlmMessage' }
        reasoning_steps:
          type: array
          items: { $ref: '#/components/schemas/ReasoningStep' }
        metadata: { type: object }
      required: [model, messages]
    LlmInteraction:
      type: object
      properties:
        id: { type: string }
        created_at: { type: string, format: date-time }
        model: { type: string }
        messages:
          type: array
          items: { $ref: '#/components/schemas/LlmMessage' }
        reasoning_steps:
          type: array
          items: { $ref: '#/components/schemas/ReasoningStep' }
        metadata: { type: object }
    LlmInteractionResponse:
      type: object
      properties:
        id: { type: string }
        success: { type: boolean }

    ChangeEntry:
      type: object
      properties:
        seq: { type: integer, format: int64 }
        ts: { type: string, format: date-time }
        op: { type: string, enum: [put, delete] }
        key: { type: string }
        table: { type: string }
        value: { type: object, nullable: true }
        prev: { type: object, nullable: true }
        txn_id: { type: string, nullable: true }
    ChangefeedResponse:
      type: object
      properties:
        from_seq: { type: integer, format: int64 }
        next_seq: { type: integer, format: int64 }
        entries:
          type: array
          items: { $ref: '#/components/schemas/ChangeEntry' }

    # ========== Legacy Transaction Schema ==========
    
    TransactionRequest:
      type: object
      required: [operations]
      properties:
        operations:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                enum: [put, delete]
              table:
                type: string
              key:
                type: string
              data:
                type: object
                additionalProperties: true
          example:
            - type: put
              table: Person
              key: person_1
              data: { name: Alice, age: 25 }
            - type: delete
              table: Person
              key: person_2
